#include <iostream>
using namespace std;

typedef struct node
{
    int data;
    struct node* next;
} Node;

Node* head = NULL;
Node* tail = NULL;

int SIZE = 10;
void Push(int input) {
    Node* newQue = (Node*)malloc(sizeof(Node));
    newQue->data = input;
    newQue->next = NULL;
    if (head == NULL) {
        head = newQue;
    }
    else tail->next = newQue;
    tail = newQue;
}
void Pop_() {
    Node* cur = head;
    head = cur->next;
}
int empty() {
    if (head == NULL) return 1;
    else return 0;
}
void print_queue() {
    cout << "# State of Queue : ";
    cout << "[";
    cout << head->data;
    Node* cur = head->next;
    while (cur != NULL)
    {
        printf(" , %d", cur->data);
        cur = cur->next;
    }
    cout << "]\n\n";
}
void Nothing() {
    cout << "# Nothing to delete in queue.\n\n";
}
int main() {
    Node* newQue = (Node*)malloc(sizeof(Node));
    int input;
    int n = 0;
    while (n != 4) {
        cout << "********** Queue Program **********\n";
        cout << "1. Insert item to Queue\n";
        cout << "2. Delete item from Queue\n";
        cout << "3. Print Queue\n";
        cout << "4. Exit\n";
        cout << "\n\n";
        cout << "Enter menu : ";
        cin >> n;
        if (n == 1) {
            cout << "Input Item : ";
            cin >> input;
            Push(input);
            print_queue();
        }
        else if (n == 2) {
            if (empty()) {  }
            else {
                Pop_();
                if (empty()) { Nothing(); }
                else {
                    print_queue();
                }
            }
        }
        else if (n == 3) {
            if(empty()) { Nothing(); }
            else print_queue();
        }
    }
    free(newQue);
    return 0;
}
